<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="menuStrip1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>